package com.bloomberg.services.datalicense.dlws.ps._20071001;

 

import java.io.File;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import com.slb.apigee.xchange.BloombergXchangeSchedulerApplication;

/**
 * This class was generated by Apache CXF 3.2.0
 * 2019-10-15T12:45:33.825-05:00
 * Generated source version: 3.2.0
 * 
 */
@WebServiceClient(name = "PerSecurityWS", 
                    wsdlLocation = "file:///dlws.wsdl",
                    targetNamespace = "http://services.bloomberg.com/datalicense/dlws/ps/20071001")
public class PerSecurityWS_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://services.bloomberg.com/datalicense/dlws/ps/20071001", "PerSecurityWS");
    public final static QName PerSecurityWSPort = new QName("http://services.bloomberg.com/datalicense/dlws/ps/20071001", "PerSecurityWSPort");
    static {
        URL url = null;
        try {
            url = new URL(BloombergXchangeSchedulerApplication.WSDL_LOCATION);

        } catch (Exception e) {
            String cwd = new File("").getAbsolutePath();

            System.out.println("Current directory is " + cwd);
            java.util.logging.Logger.getLogger(PerSecurityWS_Service.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Current Working Dir is " + cwd + "Can not initialize the default wsdl from {0} CWD is {1}", "file:/resources/wsdl/dlws.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public PerSecurityWS_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public PerSecurityWS_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public PerSecurityWS_Service() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public PerSecurityWS_Service(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public PerSecurityWS_Service(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public PerSecurityWS_Service(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns PerSecurityWS
     */
    @WebEndpoint(name = "PerSecurityWSPort")
    public PerSecurityWS getPerSecurityWSPort() {
        return super.getPort(PerSecurityWSPort, PerSecurityWS.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PerSecurityWS
     */
    @WebEndpoint(name = "PerSecurityWSPort")
    public PerSecurityWS getPerSecurityWSPort(WebServiceFeature... features) {
        return super.getPort(PerSecurityWSPort, PerSecurityWS.class, features);
    }

}
